// Define a grammar called Formula

grammar Formula;

// Tokens

IDENTIFIER : [a-zA-Z_][a-zA-Z0-9_]*;
NUMBER : ('0'| ([1-9][0-9]*)) ('.'[0-9]+)? (('e'|'E')('+'|'-')?[0-9]+)? ;
TRUE : 'true';
FALSE: 'false';
WS : [ \t\r\n]+ -> skip ; // skip spaces, tabs, newlines
OPEN_BRACKET : '[';
CLOSE_BRACKET : ']';
OPEN_PARENS : '(';
CLOSE_PARENS : ')';
DOT : '.';
COMMA : ',';
COLON : ':';
PLUS : '+';
MINUS : '-';
MULT : '*';
DIV : '/';
MOD : '%';
BITWISE_AND : '&';
BITWISE_OR : '|';
BITWISE_XOR : '^';
BITWISE_COMPLEMENT : '~';
INTERR : '?';
AND : '&&';
OR : '||';
NOT : '!';
LT : '<';
GT : '>';
EQ : '==';
NE : '!=';
LE : '<=';
GE : '>=';
LEFT_SHIFT : '<<';
RIGHT_SHIFT : '>>';
DOUBLE_QUOTE : '"';

// Rules

literal : TRUE | FALSE | NUMBER;
primary_expression : parenthesized_expression | variable_expression | literal;
parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS;
variable_expression : element_expression (DOT element_expression)*;
element_expression : call_expression (bracket_expression)?
call_expression : IDENTIFIER (invocation_expression)?;
bracket_expression : OPEN_BRACKET expression CLOSE_BRACKET;
invocation_expression : OPEN_PARENS expression_list? CLOSE_PARENS;
expression_list : expression ( COMMA expression)*;
unary_expression : primary_expression | (MINUS unary_expression) | (PLUS unary_expression) | (BITWISE_COMPLEMENT unary_expression) | (NOT unary_expression);
multiplicative_expression : unary_expression ((MULT | DIV | MOD) unary_expression)*;
additive_expression : multiplicative_expression ((PLUS | MINUS) multiplicative_expression)*;
shift_expression : additive_expression ((LEFT_SHIFT | RIGHT_SHIFT) additive_expression)*;
relational_expression : shift_expression ((LT | LE | GE | GT) shift_expression)?;
equality_expression : relational_expression ((EQ | NE) relational_expression)?;
bitwise_and_expression : equality_expression (BITWISE_AND equality_expression)*;
bitwise_xor_expression : bitwise_and_expression (BITWISE_XOR bitwise_and_expression)*;
bitwise_or_expression : bitwise_xor_expression (BITWISE_OR bitwise_xor_expression)*;
logical_and_expression : bitwise_or_expression (AND bitwise_or_expression)*;
logical_or_expression : logical_and_expression (OR logical_and_expression)*;
conditional_expression : logical_or_expression (INTERR expression COLON expression)?;
expression : conditional_expression;
